import os
import re
import json
from tqdm import tqdm
from collections import defaultdict

# Configuration
JULIET_DIR = r"D:\2017-10-01-juliet-test-suite-for-c-cplusplus-v1-3\C\testcases"
OUTPUT_DIR = "parsed_juliet_codet5_blocks"
EXTENSIONS = (".c", ".cpp", ".cc", ".cxx", ".C")

os.makedirs(OUTPUT_DIR, exist_ok=True)

# Patterns
FUNC_DEF_PATTERN = re.compile(r'void\s+(bad|good\w*)\s*\(\)\s*{', re.MULTILINE)
CWE_ID_PATTERN = re.compile(r'Filename:\s*(CWE\d+)_')
COMMENT_PATTERN = re.compile(r'/\*.*?\*/', re.DOTALL)

def extract_cwe_id(code):
    match = CWE_ID_PATTERN.search(code)
    return match.group(1) if match else "UnknownCWE"

def extract_function_blocks(code):
    functions = []
    for match in FUNC_DEF_PATTERN.finditer(code):
        func_name = match.group(1)
        start_idx = match.start()
        brace_count = 0
        i = code.find('{', start_idx)
        if i == -1:
            continue
        func_start = i
        while i < len(code):
            if code[i] == '{':
                brace_count += 1
            elif code[i] == '}':
                brace_count -= 1
                if brace_count == 0:
                    func_end = i + 1
                    body = code[start_idx:func_end]
                    functions.append((func_name, body))
                    break
            i += 1
    return functions

def extract_relevant_comments(code_block):
    comments = COMMENT_PATTERN.findall(code_block)
    # Prioritize POTENTIAL FLAW or FIX
    for c in comments:
        if "POTENTIAL FLAW" in c or "FIX" in c:
            return c.strip("/* ").strip(" */").strip()
    # Fallback to any comment
    return comments[0].strip("/* ").strip(" */").strip() if comments else ""

def process_files():
    grouped_by_cwe = defaultdict(list)
    all_files = []

    # Collect files
    for root, dirs, files in os.walk(JULIET_DIR):
        for file in files:
            if file.endswith(EXTENSIONS):
                all_files.append(os.path.join(root, file))

    print(f"🔍 Total C/C++ files to process: {len(all_files)}")

    for file_path in tqdm(all_files, desc="🧠 Parsing files", unit="file"):
        try:
            with open(file_path, 'r', encoding='latin1') as f:
                code = f.read()
        except Exception as e:
            print(f"⚠️ Could not read {file_path}: {e}")
            continue

        cwe_id = extract_cwe_id(code)
        functions = extract_function_blocks(code)

        for name, body in functions:
            label = "vulnerable" if name == "bad" else "safe"
            explanation = extract_relevant_comments(body)
            grouped_by_cwe[cwe_id].append({
                "source": body.strip(),
                "target": label,
                "function": name,
                "file": file_path,
                "cwe_id": cwe_id,
                "explanation": explanation if explanation else (
                    "This function is safe." if label == "safe"
                    else f"This function may be vulnerable to {cwe_id}."
                )
            })

    # Write output
    for cwe, items in tqdm(grouped_by_cwe.items(), desc="💾 Writing CWE files", unit="CWE"):
        output_path = os.path.join(OUTPUT_DIR, f"{cwe}.jsonl")
        with open(output_path, "w", encoding="utf-8") as f:
            for item in items:
                f.write(json.dumps(item) + "\n")

    print(f"\n✅ Done! Extracted {sum(len(v) for v in grouped_by_cwe.values())} functions across {len(grouped_by_cwe)} CWE files.")
    print(f"📂 Output directory: {os.path.abspath(OUTPUT_DIR)}")

if __name__ == "__main__":
    process_files()
